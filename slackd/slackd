#!/usr/bin/env python

"""
slackd.slackd
~~~~~~~~~~~~~

:copyright: (c) 2016 David M. Westerhoff
:license: All rights reserved

"""

import operator
import webbrowser
import tabulate
import click
import slack_requests
from common.pretty_json import pretty_json


# Root Command
# ~~~~~~~~~~~~
@click.group()
def slackd():
    pass


# Subcommands
# ~~~~~~~~~~~
@click.command()
def open():
    """Opens a new browser window to the users Slack homepage"""
    try:
        response = slack_requests.auth()
    except Exception as e:
        click.echo(str(e))

    if response.ok:
        url = response.json()['url']
        webbrowser.open(url)
    else:
        click.echo('wtf')


@click.command()
def status():
    """Shows status of the currently authed user if a Slack API Token has
    been properly provided"""
    try:
        response = slack_requests.auth()
    except Exception as e:
        click.echo(str(e))

    if response.ok:
        data = response.json()
        username = data['user']
        team = data['team']
        url = data['url']
        click.secho("User: ", nl=False, fg='green')
        click.secho("{} ".format(username))
        # click.secho("({})".format(user_id))
        click.secho("Team: ", nl=False, fg='green')
        click.secho("{} ".format(team))
        # click.secho("({})".format(team_id))
        click.secho("Home: ", nl=False, fg='green')
        click.secho("{} ".format(url), underline=True)
    else:
        click.echo('wtf')


@click.command()
def users():
    """List all of the team's users and their status"""
    try:
        response = slack_requests.users()
    except Exception as e:
        click.echo(str(e))

    if response.ok:
        users = response.json()['members']

        # Collect array of arrays that contain user data in column order
        table_data = []
        for user in users:
            user_data = [user['name'],
                         user.get('real_name', None),
                         user.get('presence', 'bot'),
                         user['profile'].get('email', None)]
            table_data.append(user_data)
        table_data.sort(key=operator.itemgetter(2))
        table_headers = ['User', 'Name', 'Presence', 'Email']
        click.secho(tabulate.tabulate(table_data,
                                      table_headers,
                                      tablefmt="fancy_grid"))
    else:
        click.secho('wtf')


@click.command()
def channels():
    """List all available channels for the team"""
    try:
        response = slack_requests.channels()
    except Exception as e:
        click.secho(str(e))

    if response.ok:
        channels = response.json()['channels']

        table_data = []
        for channel in channels:
            data = [channel['name'],
                    channel['is_member'],
                    channel['num_members']]
            table_data.append(data)
        table_data.sort(key=operator.itemgetter(2), reverse=True)

        for data in table_data:
            if data[1]:
                data[1] = 'yes'
            else:
                data[1] = 'no'

        table_headers = ['Name', 'Member?', 'Members']
        click.secho(tabulate.tabulate(table_data,
                                      table_headers,
                                      tablefmt="fancy_grid"))

    else:
        click.secho('wtf')


# Command Manifest
# ~~~~~~~~~~~~~~~~
slackd.add_command(open)
slackd.add_command(status)
slackd.add_command(users)
slackd.add_command(channels)


# Run Script
# ~~~~~~~~~~
if __name__ == '__main__':
    slackd()
